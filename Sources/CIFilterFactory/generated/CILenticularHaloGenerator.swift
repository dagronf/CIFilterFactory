//
//  CILenticularHaloGenerator.swift  (AUTOMATICALLY GENERATED FILE)
//  CIFilterFactory
//
//  MIT license
//
//  Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
//  documentation files (the "Software"), to deal in the Software without restriction, including without limitation the
//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
//  permit persons to whom the Software is furnished to do so, subject to the following conditions:
//
//  The above copyright notice and this permission notice shall be included in all copies or substantial
//  portions of the Software.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
//  WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS
//  OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
//  OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
//  Automatically generated on 2020-07-09 00:57:49 +0000.  Do not edit.

import AVFoundation
import CoreImage
import CoreML
import Foundation

@available(macOS 10.4, iOS 9, *)
@objc public extension CIFilterFactory {
	///
	/// Lenticular Halo
	///
	/// Simulates a halo that is generated by the diffraction associated with the spread of a lens. This filter is typically applied to another image to simulate lens flares and similar effects.
	///
	/// **Links**
	///
	/// [CILenticularHaloGenerator Online Documentation](http://developer.apple.com/library/mac/documentation/GraphicsImaging/Reference/CoreImageFilterReference/index.html#//apple_ref/doc/filter/ci/CILenticularHaloGenerator)
	///
	/// [CIFilter.io documentation](https://cifilter.io/CILenticularHaloGenerator/)
	///
	@objc(CIFilterFactory_CILenticularHaloGenerator) class CILenticularHaloGenerator: FilterCommon {
		@objc public init?() {
			super.init(name: "CILenticularHaloGenerator")
		}

		///
		/// The x and y position to use as the center of the halo.
		///
		///   Class:    CIVector
		///   Type:     CIAttributeTypePosition
		///   Default:  [150 150]
		@objc public dynamic var inputCenter: CIFilterFactory.Point? {
			get {
				return CIFilterFactory.Point(with: self.filter, key: "inputCenter")
			}
			set {
				self.filter.setValue(newValue?.vector, forKey: "inputCenter")
			}
		}

		///
		/// A color.
		///
		///   Class:    CIColor
		///   Default:  rgba(1 0.9 0.8 1)
		@objc public dynamic var inputColor: CIColor? {
			get {
				return self.filter.value(forKey: "inputColor") as? CIColor
			}
			set {
				self.filter.setValue(newValue, forKey: "inputColor")
			}
		}

		///
		/// The radius of the halo.
		///
		///   Class:    NSNumber
		///   Type:     CIAttributeTypeDistance
		///   Default:  70
		///   minValue: 0.0
		///
		static let inputHaloRadius_Range: PartialRangeFrom<Float> = Float(0.0)...
		@objc public dynamic var inputHaloRadius: NSNumber? {
			get {
				return self.filter.value(forKey: "inputHaloRadius") as? NSNumber
			}
			set {
				self.filter.setValue(newValue?.clamped(bounds: CILenticularHaloGenerator.inputHaloRadius_Range), forKey: "inputHaloRadius")
			}
		}

		///
		/// The width of the halo, from its inner radius to its outer radius.
		///
		///   Class:    NSNumber
		///   Type:     CIAttributeTypeDistance
		///   Default:  87
		///   minValue: 0.0
		///
		static let inputHaloWidth_Range: PartialRangeFrom<Float> = Float(0.0)...
		@objc public dynamic var inputHaloWidth: NSNumber? {
			get {
				return self.filter.value(forKey: "inputHaloWidth") as? NSNumber
			}
			set {
				self.filter.setValue(newValue?.clamped(bounds: CILenticularHaloGenerator.inputHaloWidth_Range), forKey: "inputHaloWidth")
			}
		}

		///
		/// No Description
		///
		///   Class:    NSNumber
		///   Type:     CIAttributeTypeScalar
		///   Default:  0.77
		///   minValue: 0.0
		///
		static let inputHaloOverlap_Range: PartialRangeFrom<Float> = Float(0.0)...
		@objc public dynamic var inputHaloOverlap: NSNumber? {
			get {
				return self.filter.value(forKey: "inputHaloOverlap") as? NSNumber
			}
			set {
				self.filter.setValue(newValue?.clamped(bounds: CILenticularHaloGenerator.inputHaloOverlap_Range), forKey: "inputHaloOverlap")
			}
		}

		///
		/// The intensity of the halo colors. Larger values are more intense.
		///
		///   Class:    NSNumber
		///   Type:     CIAttributeTypeScalar
		///   Default:  0.5
		///   minValue: 0.0
		///
		static let inputStriationStrength_Range: PartialRangeFrom<Float> = Float(0.0)...
		@objc public dynamic var inputStriationStrength: NSNumber? {
			get {
				return self.filter.value(forKey: "inputStriationStrength") as? NSNumber
			}
			set {
				self.filter.setValue(newValue?.clamped(bounds: CILenticularHaloGenerator.inputStriationStrength_Range), forKey: "inputStriationStrength")
			}
		}

		///
		/// The contrast of the halo colors. Larger values are higher contrast.
		///
		///   Class:    NSNumber
		///   Type:     CIAttributeTypeScalar
		///   Default:  1
		///   minValue: 0.0
		///
		static let inputStriationContrast_Range: PartialRangeFrom<Float> = Float(0.0)...
		@objc public dynamic var inputStriationContrast: NSNumber? {
			get {
				return self.filter.value(forKey: "inputStriationContrast") as? NSNumber
			}
			set {
				self.filter.setValue(newValue?.clamped(bounds: CILenticularHaloGenerator.inputStriationContrast_Range), forKey: "inputStriationContrast")
			}
		}

		///
		/// The duration of the effect.
		///
		///   Class:    NSNumber
		///   Type:     CIAttributeTypeScalar
		///   Default:  0
		///   minValue: 0.0
		///   maxValue: 1.0
		///
		static let inputTime_Range: ClosedRange<Float> = 0.0 ... 1.0
		@objc public dynamic var inputTime: NSNumber? {
			get {
				return self.filter.value(forKey: "inputTime") as? NSNumber
			}
			set {
				self.filter.setValue(newValue?.clamped(bounds: CILenticularHaloGenerator.inputTime_Range), forKey: "inputTime")
			}
		}
	}
}
